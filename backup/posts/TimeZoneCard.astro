---
import {
  getCurrentTimeInLosAngeles,
  formatTimeForLosAngeles,
} from "../lib/helpers";
import Card from "./Card/index.astro";
---

---
import Card from "./Card/index.astro";
---

<script lang="ts" client:load>
  import { createSignal, createEffect, onMount, onCleanup } from "solid-js";

  // Reactive signals for all dynamic data
  const [weekDay, setWeekDay] = createSignal("Thursday");
  const [monthDay, setMonthDay] = createSignal("September 15");
  const [location, setLocation] = createSignal("@ Stockholm");
  const [country, setCountry] = createSignal("SE");
  const [flag, setFlag] = createSignal("🇸🇪");
  const [timeText, setTimeText] = createSignal("15:30:45 CEST");
  const [weatherIcon, setWeatherIcon] = createSignal("🌤️");
  const [weatherTemp, setWeatherTemp] = createSignal("7°");

  let isUserLocation = false;
  let userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  let interval: ReturnType<typeof setInterval>;

  // Function to format time for user's timezone
  function formatUserTime(date: Date): string {
    const timezone = isUserLocation ? userTimezone : "Europe/Stockholm";
    return date.toLocaleTimeString("en-US", {
      hour: "numeric",
      minute: "2-digit",
      second: "2-digit",
      hour12: true,
      timeZone: timezone,
      timeZoneName: "short",
    });
  }

  // Function to get country flag from country code
  function getCountryFlag(countryCode: string): string {
    const flagMap: { [key: string]: string } = {
      US: "🇺🇸",
      TH: "🇹🇭",
      GB: "🇬🇧",
      CA: "🇨🇦",
      AU: "🇦🇺",
      DE: "🇩🇪",
      FR: "🇫🇷",
      JP: "🇯🇵",
      KR: "🇰🇷",
      CN: "🇨🇳",
      IN: "🇮🇳",
      BR: "🇧🇷",
      MX: "🇲🇽",
      IT: "🇮🇹",
      ES: "🇪🇸",
      RU: "🇷🇺",
      NL: "🇳🇱",
      SE: "🇸🇪",
      NO: "🇳🇴",
      DK: "🇩🇰",
      FI: "🇫🇮",
      PL: "🇵🇱",
      TR: "🇹🇷",
      SG: "🇸🇬",
      MY: "🇲🇾",
      ID: "🇮🇩",
      PH: "🇵🇭",
      VN: "🇻🇳",
      NZ: "🇳🇿",
      ZA: "🇿🇦",
    };
    return flagMap[countryCode] || "🌍";
  }

  // Function to get location name from coordinates
  async function getLocationName(lat: number, lon: number): Promise<string> {
    try {
      const response = await fetch(
        `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=en`,
      );
      const data = await response.json();
      return data.city || data.locality || "Unknown";
    } catch (error) {
      console.error("Error fetching location:", error);
      return "Location unavailable";
    }
  }

  // Function to get country code from coordinates
  async function getCountryCode(lat: number, lon: number): Promise<string> {
    try {
      const response = await fetch(
        `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=en`,
      );
      const data = await response.json();
      return data.countryCode || "XX";
    } catch (error) {
      console.error("Error fetching country code:", error);
      return "XX";
    }
  }

  // Function to format date
  function formatDate(date: Date): { weekDay: string; monthDay: string } {
    const timezone = isUserLocation ? undefined : "Europe/Stockholm";
    const weekDay = date.toLocaleDateString("en-US", {
      weekday: "long",
      timeZone: timezone,
    });
    const month = date.toLocaleDateString("en-US", {
      month: "long",
      timeZone: timezone,
    });
    const day = date.getDate();

    return {
      weekDay: weekDay,
      monthDay: `${month} ${day}`,
    };
  }

  // Function to get weather icon based on weather condition
  function getWeatherIcon(condition: string, isDay: boolean): string {
    const weatherMap: { [key: string]: string } = {
      clear: isDay ? "☀️" : "🌙",
      clouds: "☁️",
      rain: "🌧️",
      drizzle: "🌦️",
      thunderstorm: "⛈️",
      snow: "❄️",
      mist: "🌫️",
      fog: "🌫️",
      haze: "🌫️",
      dust: "🌫️",
      sand: "🌫️",
      ash: "🌫️",
      squall: "💨",
      tornado: "🌪️",
    };

    const conditionLower = condition.toLowerCase();
    for (const [key, icon] of Object.entries(weatherMap)) {
      if (conditionLower.includes(key)) {
        return icon;
      }
    }

    return isDay ? "☀️" : "🌙"; // Default fallback
  }

  // Real weather API using OpenWeatherMap with proper API key
  async function getWeatherDataFree(
    lat: number,
    lon: number,
  ): Promise<{ icon: string; temp: number }> {
    try {
      const API_KEY = "4d8fb5b93d4af21d66a2948710284366";
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`,
      );

      if (response.ok) {
        const data = await response.json();
        const condition = data.weather[0].main;
        const isDay = data.weather[0].icon.includes("d");
        const temperature = Math.round(data.main.temp);
        return {
          icon: getWeatherIcon(condition, isDay),
          temp: temperature,
        };
      } else {
        throw new Error(`API Error: ${response.status}`);
      }
    } catch (error) {
      console.error("Error fetching weather:", error);
      const hour = new Date().getHours();
      return {
        icon: hour >= 6 && hour < 18 ? "☀️" : "🌙",
        temp: 0,
      };
    }
  }

  // Update date and time signals
  function updateDateTime() {
    const now = new Date();
    const { weekDay: wd, monthDay: md } = formatDate(now);
    setWeekDay(wd);
    setMonthDay(md);
    setTimeText(formatUserTime(now));
  }

  // Get user's location and weather
  async function getUserLocation() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          console.log("Location accepted, updating...");
          const { latitude, longitude } = position.coords;
          const locationName = await getLocationName(latitude, longitude);
          const countryCode = await getCountryCode(latitude, longitude);

          isUserLocation = true;
          setLocation(locationName);
          setCountry(countryCode);
          setFlag(getCountryFlag(countryCode));
          const weatherData = await getWeatherDataFree(latitude, longitude);
          setWeatherIcon(weatherData.icon);
          setWeatherTemp(`${weatherData.temp}°`);

          console.log("Updated values:", {
            isUserLocation,
            location: locationName,
            country: countryCode,
            flag: getCountryFlag(countryCode),
            weatherIcon: weatherData.icon,
            weatherTemp: weatherData.temp,
          });
        },
        async (error) => {
          console.error("Geolocation error:", error);
          isUserLocation = false;
          setLocation("@ Stockholm");
          setCountry("SE");
          setFlag("🇸🇪");
          const weatherData = await getWeatherDataFree(59.3293, 18.0686);
          setWeatherIcon(weatherData.icon);
          setWeatherTemp(`${weatherData.temp}°`);
        },
      );
    } else {
      // Keep default Stockholm location
      isUserLocation = false;
      setLocation("@ Stockholm");
      setCountry("SE");
      setFlag("🇸🇪");

      // Get real Stockholm weather
      const weatherData = await getWeatherDataFree(59.3293, 18.0686);
      setWeatherIcon(weatherData.icon);
      setWeatherTemp(`${weatherData.temp}°`);
    }
  }

  onMount(() => {
    updateDateTime();
    getUserLocation();
    interval = setInterval(updateDateTime, 1000);
  });

  onCleanup(() => {
    clearInterval(interval);
  });
</script>
<Card client:load colSpan="lg:col-span-2" rowSpan="md:row-span-2" title="">
  <div class="grid grid-cols-1 gap-4 h-full">
    <!-- Left Column: Main Info -->
    <div id="infoMain" class="flex flex-col gap-2">
      <div>
        <!-- Row 2: Location -->
        <div class="text-lg md:text-base mb-3 flex whitespace-nowrap">
          <div class="text-lg mr-2">
            <span class="text-white text-2xl f-bold">
              {location()}
            </span>
          </div>
          <div class="whitespace-nowrap">
            <span class="text-2xl">{flag()}</span>
            <span class="text-2xl text-neutral-100/100 f-bold ml-1">
              {country()}
            </span>
          </div>
        </div>

        <!-- Row 1: Date and Weather -->
        <div class="flex items-center gap-4 flex-wrap md:flex-nowrap mb-0 min-w-0">
          <!-- Date block: responsive, will wrap naturally without truncation -->
          <div class="text-xl md:text-lg lg:text-xl text-neutral-100/60 flex items-center gap-2 flex-1 min-w-0 flex-wrap">
            <span>{weekDay()}</span>
            <span class="mx-1">,</span>
            <span class="md:whitespace-nowrap">{monthDay()}</span>
          </div>

          <!-- Weather group: stays together and moves to its own row on small screens -->
          <div class="flex items-center gap-2 w-full md:w-auto mt-2 md:mt-0 justify-start md:justify-start">
            <span class="text-xl md:text-2xl text-neutral-100/90">{weatherIcon()}</span>
            <span class="text-xl md:text-2xl text-neutral-100/90">{weatherTemp()}</span>
          </div>
        </div>

        <!-- Row 3: Time -->
        <div class="text-xl md:text-lg lg:text-2xl text-neutral-100/90 mb-0 f-bold flex">
          <span>
            <time
              datetime={new Date().toISOString()}
              class="text-4xl md:text-3xl lg:text-5xl flex h-full tracking"
            >
              {timeText()}
            </time>
          </span>
        </div>
      </div>
    </div>

    <!-- Right Column: Extra Info 
    <div class="infoExtra flex flex-col justify-center items-center">
      <div class="text-center"></div>
    </div>
  </div>
      -->
  </div>
</Card>
